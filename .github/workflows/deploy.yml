name: CI/CD - Build, Test, Push to ECR, Deploy via SSM

on:
  push:
    branches:
      - development

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version

      - name: Start PostgreSQL for tests
        run: docker-compose -f docker-compose.test.yml up -d
        env:
          TEST_DB_USER: ${{ secrets.TEST_DB_USER }}
          TEST_DB_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          TEST_DB_NAME: ${{ secrets.TEST_DB_NAME }}

      - name: Wait for DB to be ready
        run: |
          until pg_isready -h 127.0.0.1 -p 5432; do
            echo "Waiting for database..."
            sleep 2
          done

      - name: Run tests
        env:
          DATABASE_URL: postgresql+asyncpg://${{ secrets.TEST_DB_USER }}:${{ secrets.TEST_DB_PASSWORD }}@127.0.0.1:5432/${{ secrets.TEST_DB_NAME }}
          USERNAME: ${{ secrets.USERNAME }}
          PASSWORD: ${{ secrets.PASSWORD }}
          MODEL_BASE_URL: ${{ secrets.MODEL_BASE_URL }}
        run: pytest tests/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image to ECR
        env:
          ECR_REPO: ${{ secrets.ECR_REPO }}
        run: |
          docker build -t $ECR_REPO:$IMAGE_TAG .
          docker push $ECR_REPO:$IMAGE_TAG

      - name: Deploy via SSM to EC2
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=GenAI Book EC2" \
                      "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].InstanceId" \
            --output text)

          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy latest image from ECR" \
            --instance-ids "$INSTANCE_ID" \
            --parameters commands='
mkdir -p /home/ubuntu/app

cat <<EOT > /home/ubuntu/app/.env
DATABASE_URL=${{ secrets.DATABASE_URL }}
USERNAME=${{ secrets.USERNAME }}
PASSWORD=${{ secrets.PASSWORD }}
MODEL_BASE_URL=${{ secrets.MODEL_BASE_URL }}
EOT

aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
  | docker login --username AWS --password-stdin ${{ secrets.ECR_REPO }}

docker pull ${{ secrets.ECR_REPO }}:${{ env.IMAGE_TAG }}

docker stop book-api || true
docker rm book-api || true

docker run -d --name book-api -p 8000:8000 \
  --env-file /home/ubuntu/app/.env \
  ${{ secrets.ECR_REPO }}:${{ env.IMAGE_TAG }}
            ' \
            --output text
